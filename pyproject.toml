[tool.poetry]
name = "global-heat-flow-database"
version = "0.0.0"
description = "Code base for the IHFC's Global Heat Flow Database web application"
authors = ["Sam <samuel.scott.jennings@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/WorldHeatFlowDatabase/world-heat-flow-database"
packages = [
    { include = "schemas", from = "project" },
]
include = ["LICENSE", "README.md", "requirements.txt"]

classifiers = [
    "Development Status :: 1 - Planning",
    "Framework :: Django :: 4.0",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[tool.poetry.urls]
"World Heat Flow Database Project" = "https://heatflow.world"
"IHFC" = "http://ihfc-iugg.org"


[tool.poetry.dependencies]
python = ">=3.10,<4.0"
django = ">5"
django-research-vocabs = {git = "https://github.com/Geoluminate/django-research-vocabs", rev = "master"}
geoluminate = {git = "https://github.com/Geoluminate/geoluminate", rev = "main"}
django-formset = "^1.3.8"

[tool.poetry.group.dev.dependencies]
coverage = "^7.2.1"
pytest = "^7.2.2"
django-coverage-plugin = "^3.0.0"
pytest-django = "^4.5.2"
django-stubs = "^1.15.0"
pylint-django = "^2.5.3"
invoke = "^2.0.0"
tox = "^4.4.6"
deptry = "^0.8.0"
mypy = "^1.11.1"
pre-commit = "^3.2.2"
pytest-cov = "^4.0.0"
types-requests = "^2.28.11.17"
types-python-dateutil = "^2.8.19.12"
pytest-sugar = "^0.9.7"
django-debug-toolbar = "^3.8.1"
django-extensions = "^3.2.1"
djangorestframework-stubs = "^1.9.1"
pylint-celery = "^0.3"
django-debug-toolbar-template-profiler = "^2.1.0"
ipdb = "^0.13.11"
django-redis = "^5.2.0"
geoluminate-docs = {git = "https://github.com/Geoluminate/geoluminate-docs.git", rev = "master"}
factory-boy = "^3.3.0"
django-auto-datatables = {git = "https://github.com/SSJenny90/django-auto-datatables", rev = "main"}
django-literature = {git = "https://github.com/Geoluminate/django-literature", rev = "main"}
django-laboratory = {git = "https://github.com/Geoluminate/django-laboratory", rev = "main"}
django-content-license = {git = "https://github.com/Geoluminate/django-content-license", rev = "main"}
djlint = "^1.34.1"


[tool.poetry.group.production.dependencies]
sentry-sdk = {extras = ["django"], version = "^1.17.0"}


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py311"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    # ClassAttributesShouldBeAnnotated
    "RUF012",
    "TRY003",

    "A003",
    "F403",
    "F405",
    "C901",
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*/migrations/*.py",
    "staticfiles/*",
    'geoluminate/conf/*',
    "docs/",
]
[tool.ruff.lint.per-file-ignores]
"**/tests/*" = ["S101","S105"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 88
line-ending = "lf"
[tool.djlint]
blank_line_after_tag="load,endblock"
close_void_tags=true
custom_html="django-formset"
format_js=true
format_css=true
indent=2
max_attribute_length=100
max_blank_lines=0
max_line_length=119
ignore="H016,H030,H031,H021"

[tool.djlint.css]
indent_size=2


[tool.djlint.js]
indent_size=5

[tool.mypy]
files = ["project"]
disallow_untyped_defs = false
disallow_any_unimported = false
ignore_missing_imports = true
no_implicit_optional = true
check_untyped_defs = false
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
exclude = ["docs/","migrations/","tests/settings.py"]
mypy_path = "project/"
plugins = ["mypy_django_plugin.main"]

[tool.django-stubs]
django_settings_module = "tests.settings"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.development"
reuse_db = true
python_files = ["test_*.py", "*_test.py", "testing/python/*.py"]
filterwarnings = [
    "ignore",
    "default:::laboratory",
]


[tool.coverage.report]
skip_empty = true
omit = [
    "*site-packages*",
    "*tests*",
    "*.tox*",
    ]
show_missing = "true"

[tool.coverage.run]
branch = "true"
source = ["laboratory"]


[tool.deptry]
skip_misplaced_dev = "true"
extend_exclude = [
    "tasks.py",
    "docs",
    ".*tests",
    ".*migrations",
]
ignore_transitive = [
    "toml",
    "sentry_sdk",
]

ignore_missing = [
    "ghfdb",
]

[tool.tox]
legacy_tox_ini = """
[tox]
skipsdist = true
envlist = py310, py311

[gh-actions]
python =
    3.10: py310
    3.11: py311

[testenv]
passenv = PYTHON_VERSION
allowlist_externals = poetry
commands =
    poetry install -v --without docs
    pytest --doctest-modules tests --cov --cov-config=pyproject.toml --cov-report=xml
    mypy
"""
